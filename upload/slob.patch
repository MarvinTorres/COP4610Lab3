--- slob.c	2019-11-14 21:26:23.946443220 -0500
+++ slob_new.c	2019-11-14 23:39:23.025241961 -0500
@@ -254,11 +254,23 @@
 
 /*
  * Allocate a slob block within a given slob_page sp.
+ * MODIFIED: This function used a first-fit approach to finding a free slob. It originally found and 
+ * allocated the first free slob found in the page. 
+ 
+ * Now it uses a best-fit approach to finding a free slob. Namely, it now keeps track of the minimum fitting slob found while 
+ * searching through the slobs. After reaching the final slob, it immediately knows which is the best-fitting
+ * slob (the smallest one that fits the request) and allocates it.
  */
 static void *slob_page_alloc(struct page *sp, size_t size, int align)
 {
 	slob_t *prev, *cur, *aligned = NULL;
 	int delta = 0, units = SLOB_UNITS(size);
+	
+	slob_t *min_fit = NULL; 	//This is the slob that will be allocated.
+	int min_delta = 0;		//delta when min_fit was updated
+	slob_t *min_aligned = NULL;	//aligned when min_fit was updated
+	slob_t *min_prev = NULL;	//prev when min_fit was updated
+	
 	//freelist points to a list of free blocks within the page. A page in this function must have at least one freelist.
 	for (prev = NULL, cur = sp->freelist; ; prev = cur, cur = slob_next(cur)) {
 		slobidx_t avail = slob_units(cur);
@@ -268,38 +280,65 @@
 			delta = aligned - cur;
 		}
 		if (avail >= units + delta) { /* room enough? */
+			/*
+			 * Compare current fitting slob with the minimum fitting slob. If the current one uses less 
+			 * space than the minimum, then it becomes the new minimum. Else the minimum remains unchanged.
+			 */
+			if (!min_fit || avail < slob_units(min_fit)) {
+				/*
+				 * min_delta, min_aligned, and min_prev have to be made because the variables
+				 * used in the original code (delta, aligned, prev)
+				 * are relative to the current slob, may change between slobs, and are
+				 * used in the allocation code. 
+				 * So we have to archive these values for the minimum fitting slob to use in the allocation code.
+				 */
+				min_fit = cur;
+				if (align) {
+					min_delta = delta;
+					min_aligned = aligned;
+				}
+				min_prev = prev;
+			}
+		}
+		if (slob_last(cur)) { //We reached the end of the page, now to allocate the minimum fitting slob
+			/*
+			 * I am unsure how deltas and alignment works, but I am pretty sure that this is 
+			 * the part where the slob allocator allocates slobs. I cop
+			 */
 			slob_t *next;
-
-			if (delta) { /* need to fragment head to align? */
-				next = slob_next(cur);
-				set_slob(aligned, avail - delta, next);
-				set_slob(cur, delta, aligned);
-				prev = cur;
-				cur = aligned;
-				avail = slob_units(cur);
+			
+			if (!min_fit) { //Was no suitable slob found?
+				return NULL; 
+			}		
+
+			if (min_delta) { /* need to fragment head to align? */
+				next = slob_next(min_fit);
+				set_slob(min_aligned, avail - min_delta, next);
+				set_slob(min_fit, min_delta, min_aligned);
+				min_prev = min_fit;
+				min_fit = min_aligned;
+				avail = slob_units(min_fit);
 			}
 
-			next = slob_next(cur);
+			next = slob_next(min_fit);
 			if (avail == units) { /* exact fit? unlink. */
-				if (prev)
-					set_slob(prev, slob_units(prev), next);
+				if (min_prev)
+					set_slob(min_prev, slob_units(min_prev), next);
 				else
 					sp->freelist = next;
 			} else { /* fragment */				
 				if (prev)
-					set_slob(prev, slob_units(prev), cur + units);
+					set_slob(min_prev, slob_units(min_prev), min_fit + units);
 				else
-					sp->freelist = cur + units;
-				set_slob(cur + units, avail - units, next);
+					sp->freelist = min_fit + units;
+				set_slob(min_fit + units, avail - units, next);
 			}
 
 			sp->units -= units;
 			if (!sp->units)
 				clear_slob_page_free(sp);
-			return cur;
+			return min_fit;
 		}
-		if (slob_last(cur))
-			return NULL;
 	}
 }
 
